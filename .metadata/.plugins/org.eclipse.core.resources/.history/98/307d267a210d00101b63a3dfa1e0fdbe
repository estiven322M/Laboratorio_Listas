

public class SimpleLinkedList<T> {

	Node<T> head;
	int size;

	public class Node<T> {
		T data;
		Node<T> next;

		public Node(T data) {
			this.data = data;
			next = null;
		}

	}

	public SimpleLinkedList() {
		head = null;
		size = 0;
	}

	public void insertAtEnd(T data) {
		Node<T> newNode = new Node<T>(data);

		if (head == null) {
			head = newNode;
			return;
		} else {
			Node<T> last = head;
			while (last.next != null) {
				last = last.next;

			}
			last.next = newNode;
			size++;

		}

	}

	public int size() {
		return size;
	}

	public void printList() {
		Node<T> temp = head;
		while (temp != null) {
			System.out.print(temp.data + " ");

			temp = temp.next;
		}
		System.out.println();
	}
	
	public  SimpleLinkedList<T> countImparPosition() {
		SimpleLinkedList <T>  imparPosition = new SimpleLinkedList<>();
        Node<T>temp = head;
        int counter = 1;
        while (temp !=null) {
        	if(counter%2 ==0)
            	imparPosition.insertAtEnd(temp.data);
        	
        	temp = temp.next;
        	counter ++;
            
            
            
        }
        return imparPosition;
        
    }

}
