package PrincipalPackage;

public class SingleLinkedList<T> {

	protected Node<T> head;
	protected int size;

	 public class Node<T> {
		T data;
		Node<T> next;

		public Node(T data) {
			this.data = data;
			next = null;
		}

	}

	public SingleLinkedList() {
		head = null;
		size = 0;
	}

	public void insertAtEnd(T data) {
		Node<T> newNode = new Node<T>(data);

		if (head == null) {
			head = newNode;
			return;
		} else {
			Node<T> last = head;
			while (last.next != null) {
				last = last.next;

			}
			last.next = newNode;
			size++;

		}

	}

	public void insertAtBeginning(T data) {
		Node<T> newNode = new Node<>(data);
		newNode.next = head;
		head = newNode;
		size++;

	}
	
	

	public void deleteNode(T data) {
		Node<T> temp =head, prev = null;

		// Caso 1: El nodo a eliminar es el primero
		if (temp != null && temp.data.equals(data)) {
			head = temp.next;
			return;
		}
		
		//Busca el nodo a eliminar
		 while (temp != null && !temp.data.equals(data)) {
		        prev = temp;
		        temp = temp.next;
		    }
		 
		 //Si no se encontro el nodo
		if (temp == null) {
			return;
		}
		prev.next = temp.next;
	}
	
	

	public int size() {
		return size;
	}

	public void printList() {
		Node<T> temp = head;
		while (temp != null) {
			System.out.print(temp.data + " ");

			temp = temp.next;
		}
		System.out.println();
	}
	
	public int countNodes() {
        Node <T >temp = head;
        int counter = 0;
        while (temp != null) {
            counter += 1;
            temp = temp.next;
        }
        return counter;
    }

	/**public SingleLinkedList<T> countImparPosition() {
		SingleLinkedList<T> imparPosition = new SingleLinkedList<>();
		Node<T> temp = head;
		int counter = 1;
		while (temp != null) {
			if (counter % 2 == 0)
				imparPosition.insertAtEnd(temp.data);

			temp = temp.next;
			counter++;

		}
		return imparPosition;

	}**/
	
	public boolean search(T data) {
	    Node <T >current = head;
	    while (current != null) {
	        if (current.data == data)
	            return true;
	        current = current.next;
	    }
	    return false;
	}

}
